package com.quark.skillopedia.mainview;

import android.content.Intent;
import android.os.Bundle;
import android.support.v4.app.FragmentTransaction;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.FrameLayout;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.TextView;

import com.loopj.android.http.AsyncHttpResponseHandler;
import com.quark.api.auto.bean.CatetoryFragmentListResponse;
import com.quark.api.auto.bean.CatetoryListRequest;
import com.quark.api.auto.bean.ListCatetory;
import com.quark.skillopedia.AppContext;
import com.quark.skillopedia.AppParam;
import com.quark.skillopedia.R;
import com.quark.skillopedia.adapter.CategoryLeftAdapter;
import com.quark.skillopedia.api.ApiResponse;
import com.quark.skillopedia.api.remote.QuarkApi;
import com.quark.skillopedia.base.BaseFragment;
import com.quark.skillopedia.uiview.NewLoginActivity;
import com.quark.skillopedia.uiview.fenlei.CategoryFragment;
import com.quark.skillopedia.uiview.fenlei.SearchActivity;
import com.quark.skillopedia.uiview.zhanghu.MessageActivity;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import butterknife.ButterKnife;
import butterknife.InjectView;
import butterknife.OnClick;
import cz.msebera.android.httpclient.Header;

/**
 * 主界面 category页面
 * @author pan
 * @time 2016/8/22 0022 下午 3:57
 */
public class FragmentTwo extends BaseFragment {
    View twoLayout;
    ArrayList<ListCatetory> catetories;
    CategoryLeftAdapter adapter;
    Map<String,CategoryFragment> frg = new HashMap<>();

    @InjectView(R.id.fragment_two)
    LinearLayout fragmentTwo;
    @InjectView(R.id.kecheng)
    LinearLayout kecheng;
    @InjectView(R.id.fragment_container)
    FrameLayout fragment_container;
    @InjectView(R.id.category)
    ListView clist;
    @InjectView(R.id.nodata)
    TextView nodata;

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        twoLayout = inflater.inflate(R.layout.fragment_two, container, false);
        ButterKnife.inject(this, twoLayout);
        catetories = new ArrayList<>();

        catetoryListRequest();

        return twoLayout;
    }

    @Override
    public void onDestroyView() {
        super.onDestroyView();
        ButterKnife.reset(this);
    }

    public void catetoryListRequest() {
        CatetoryListRequest rq = new CatetoryListRequest();
        showWait(true);
        QuarkApi.HttpRequest(rq, mHandlercategory);
    }

    private final AsyncHttpResponseHandler mHandlercategory = new AsyncHttpResponseHandler() {
        @Override
        public void onSuccess(int arg0, Header[] arg1, byte[] arg2) {
            Object kd = ApiResponse.get(arg2, getActivity(), CatetoryFragmentListResponse.class);
            if (kd != null) {
                CatetoryFragmentListResponse info = (CatetoryFragmentListResponse) kd;
                catetories.addAll(info.getCatetoryListResult().getCatetorys());
                adapter = new CategoryLeftAdapter(getActivity(), catetories);
                clist.setAdapter(adapter);
                clist.setOnItemClickListener(cclick);
                if (catetories!=null&&catetories.size()>0){
                    nodata.setVisibility(View.GONE);
                    kecheng.setVisibility(View.VISIBLE);
                    showone();
                }else{
                    nodata.setVisibility(View.VISIBLE);
                    kecheng.setVisibility(View.GONE);
                }
            }
            showWait(false);
        }

        @Override
        public void onFailure(int arg0, Header[] arg1, byte[] arg2, Throwable arg3) {
            AppContext.showToast("Network error" + arg0);
            showWait(false);
        }
    };

    public void showone(){
        adapter.setChoosePosition(0);
        adapter.notifyDataSetChanged();
        FragmentTransaction fragmentTransaction = getActivity().getSupportFragmentManager().beginTransaction();
        String catetory_id = catetories.get(0).getCatetory_id()+"";
        hideFragments(fragmentTransaction);
        if (frg.containsKey(catetory_id)){
            fragmentTransaction.show(frg.get(catetory_id));
        }else{
            CategoryFragment myFragment = new CategoryFragment();
            fragmentTransaction.add(R.id.fragment_container, myFragment, catetory_id);
            Bundle bundle = new Bundle();
            bundle.putString("category_id", catetory_id);
            myFragment.setArguments(bundle);
            frg.put(catetory_id, myFragment);
        }
        fragmentTransaction.commit();
    }

    AdapterView.OnItemClickListener cclick = new AdapterView.OnItemClickListener() {
        @Override
        public void onItemClick(AdapterView<?> parent, View view, int position, long id) {

            adapter.setChoosePosition(position);
            adapter.notifyDataSetChanged();
            FragmentTransaction fragmentTransaction = getActivity().getSupportFragmentManager().beginTransaction();
            String catetory_id = catetories.get(position).getCatetory_id()+"";
            hideFragments(fragmentTransaction);
            if (frg.containsKey(catetory_id)){
                fragmentTransaction.show(frg.get(catetory_id));
            }else{
                CategoryFragment myFragment = new CategoryFragment();
                fragmentTransaction.add(R.id.fragment_container, myFragment, catetory_id);
                Bundle bundle = new Bundle();
                bundle.putString("category_id", catetory_id);
                myFragment.setArguments(bundle);
                frg.put(catetory_id, myFragment);
            }
            fragmentTransaction.commit();
        }
    };

    private void hideFragments(FragmentTransaction transaction) {
        for (Map.Entry<String, CategoryFragment> entry : frg.entrySet()) {
            if (entry.getValue() != null) {
                transaction.hide(entry.getValue());
            }
        }
    }

    @OnClick({R.id.msg,R.id.tosearch})
    public void msgsearch(View v){
        switch (v.getId()){
            case R.id.msg:
                if (new AppParam().isLogin(getActivity())){
                    Intent in = new Intent(getActivity(), MessageActivity.class);
                    in.putExtra("agent_level", "");
                    startActivity(in);
                }else {
                    startActivity(new Intent().setClass(getActivity(), NewLoginActivity.class));
                }
                break;
            case R.id.tosearch:
                Intent intent = new Intent(getActivity(),SearchActivity.class);
                intent.putExtra("from","category");
                startActivity(intent);
                break;
        }
    }
}




