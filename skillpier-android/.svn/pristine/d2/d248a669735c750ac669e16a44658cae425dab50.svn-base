package com.quark.skillopedia.mainview;

import android.Manifest;
import android.annotation.SuppressLint;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.IntentFilter;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.support.v4.content.ContextCompat;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.Toast;

import com.joooonho.SelectableRoundedImageView;
import com.loopj.android.http.AsyncHttpResponseHandler;
import com.quark.api.auto.bean.BaseInfoRequest;
import com.quark.api.auto.bean.FileItem;
import com.quark.api.auto.bean.InfoResponse;
import com.quark.api.auto.bean.UpdateAvatarRequest;
import com.quark.api.auto.bean.UpdateAvatarResponse;
import com.quark.api.auto.bean.UserInfoskill;
import com.quark.skillopedia.AppContext;
import com.quark.skillopedia.AppParam;
import com.quark.skillopedia.R;
import com.quark.skillopedia.api.ApiHttpClient;
import com.quark.skillopedia.api.ApiResponse;
import com.quark.skillopedia.api.remote.QuarkApi;
import com.quark.skillopedia.base.BaseFragment;
import com.quark.skillopedia.ui.dialog.CustomDialog;
import com.quark.skillopedia.uiview.NewLoginActivity;
import com.quark.skillopedia.uiview.zhanghu.FavoritesActivity;
import com.quark.skillopedia.uiview.zhanghu.MessageActivity;
import com.quark.skillopedia.uiview.zhanghu.SettingActivity;
import com.quark.skillopedia.uiview.zhanghu.jiaolian.AuthenActivity;
import com.quark.skillopedia.uiview.zhanghu.jiaolian.NoSkillopediaActivity;
import com.quark.skillopedia.uiview.zhanghu.jiaolian.SkillopediaActivity;
import com.quark.skillopedia.uiview.zhanghu.youhui.CouponActivity;
import com.quark.skillopedia.uiview.zhanghu.zhuye.AccountSettingActivity;
import com.quark.skillopedia.uiview.zhanghu.zhuye.PersonHomeActivity;
import com.quark.skillopedia.util.ImageUtils;
import com.quark.skillopedia.util.ImageUtilsyasuo;

import org.kymjs.kjframe.http.HttpCallBack;

import java.io.File;
import java.io.IOException;
import java.util.LinkedList;
import java.util.List;

import butterknife.ButterKnife;
import butterknife.InjectView;
import butterknife.OnClick;
import cz.msebera.android.httpclient.Header;
import pub.devrel.easypermissions.EasyPermissions;

/**
 * 主界面 account页面
 *
 * @author pan
 * @time 2016/8/22 0022 下午 3:59
 */
@SuppressLint("ResourceAsColor")
public class FragmentFour extends BaseFragment implements EasyPermissions.PermissionCallbacks {
    View fourViewt;
    UserInfoskill userinfo;
    //UserInfo userinfo;
    @InjectView(R.id.left_img)
    ImageView leftImg;
    @InjectView(R.id.title)
    TextView title;
    @InjectView(R.id.rightrig)
    ImageView rightrig;
    @InjectView(R.id.right)
    LinearLayout right;
    @InjectView(R.id.mysteps_ly)
    LinearLayout mystepsLy;
    @InjectView(R.id.atovar)
    SelectableRoundedImageView atovar;
    @InjectView(R.id.name)
    TextView name;
    @InjectView(R.id.no_tv)
    TextView noTv;
    @InjectView(R.id.email)
    TextView email;
    @InjectView(R.id.logout_bt)
    Button logoutBt;
    @InjectView(R.id.steps_line)
    View steps_line;
    @InjectView(R.id.agent_level)
    TextView agentLevel;
    @InjectView(R.id.step_comment_tv)
    TextView stepCommentTv;

    @InjectView(R.id.number)
    TextView number;
    @InjectView(R.id.red_notice)
    TextView redNotice;

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        fourViewt = inflater.inflate(R.layout.fragment_four, container, false);
        ButterKnife.inject(this, fourViewt);
        title.setText("Account");
        leftImg.setVisibility(View.INVISIBLE);
        right.setVisibility(View.VISIBLE);
        rightrig.setImageDrawable(ContextCompat.getDrawable(getActivity(), R.drawable.message_2));
        stepCommentTv.setText("Step & Comment");

        if (new AppParam().isLogin(getActivity())) {
            baseInfoRequest();
        } else {
            logoutBt.setVisibility(View.INVISIBLE);
            noTv.setVisibility(View.VISIBLE);
            name.setVisibility(View.GONE);
            email.setVisibility(View.GONE);
            steps_line.setVisibility(View.GONE);
            mystepsLy.setVisibility(View.GONE);
        }


        registerBoradcastReceiverfour();
        return fourViewt;
    }

    @Override
    public void onDestroyView() {
        super.onDestroyView();
        ButterKnife.reset(this);
    }

    @OnClick({R.id.favorites_ly, R.id.coupon_ly, R.id.here_ly, R.id.mysteps_ly, R.id.settings_ly, R.id.right_ly,
            R.id.rightrig, R.id.logout_bt, R.id.toinfo})
    public void onClick(View view) {
        if (new AppParam().isLogin(getActivity())) {
            switch (view.getId()) {
                case R.id.rightrig:
                    Intent in = new Intent(getActivity(), MessageActivity.class);
                    in.putExtra("agent_level", userinfo.getAgent_level() + "");
                    startActivity(in);
                    number.setVisibility(View.GONE);
                    break;
                case R.id.right_ly:
                    Intent i = new Intent(getActivity(), PersonHomeActivity.class);
                    startActivity(i);
                    break;
                case R.id.favorites_ly:
                    Intent i1 = new Intent(getActivity(), FavoritesActivity.class);
                    startActivity(i1);
                    break;
                case R.id.coupon_ly:
                    Intent i2 = new Intent(getActivity(), CouponActivity.class);
                    startActivity(i2);
                    break;
                case R.id.here_ly:
                    //普通用户到 认证
                    if (userinfo != null && userinfo.getAgent_level() == 1) {
                        if (userinfo.getAuthen_status().equals("0")) {          //0-未认证，1-审核中，2-审核通过，3-审核不通过
                            Intent i6 = new Intent(getActivity(), AuthenActivity.class);
                            startActivity(i6);
                        } else if (userinfo.getAuthen_status().equals("1")) {
                            Intent i6 = new Intent(getActivity(), NoSkillopediaActivity.class);
                            i6.putExtra("authen_status", userinfo.getAuthen_status() + "");
                            i6.putExtra("authen_num", userinfo.getAuthen_num() + "");
                            startActivity(i6);
                        } else if (userinfo.getAuthen_status().equals("2")) {//是教练

                        } else if (userinfo.getAuthen_status().equals("3")) {
                            Intent i6 = new Intent(getActivity(), NoSkillopediaActivity.class);
                            i6.putExtra("authen_status", userinfo.getAuthen_status() + "");
                            i6.putExtra("authen_num", userinfo.getAuthen_num() + "");
                            startActivity(i6);
                        }
                    } else {//教练
                        Intent i6 = new Intent(getActivity(), SkillopediaActivity.class);
                        if (showRedButton) {
                            i6.putExtra("showRed", "1");
                        }
                        startActivity(i6);
                    }
                    break;
                case R.id.mysteps_ly:
                    Intent i4 = new Intent(getActivity(), PersonHomeActivity.class);
                    i4.putExtra("userid", userinfo.getUser_id() + "");
                    if (userinfo != null && userinfo.getAgent_level() == 2) {
                        i4.putExtra("isCoach", true);
                    }
                    startActivity(i4);
                    break;
                case R.id.logout_bt:
                    CustomDialog.Builder builder = new CustomDialog.Builder(getActivity());
                    builder.setMessage("Sure you want to log out?");
                    builder.setTitle("WARNING");
                    builder.setPositiveButton("cancel", new DialogInterface.OnClickListener() {
                        public void onClick(DialogInterface dialog, int which) {
                            dialog.dismiss();
                        }
                    });
                    builder.setNegativeButton("Log out",
                            new DialogInterface.OnClickListener() {
                                public void onClick(DialogInterface dialog, int which) {
                                    dialog.dismiss();
                                    new AppParam().setSharedPreferencesy(getActivity(), "token", "");
                                    new AppParam().setSharedPreferencesy(getActivity(), "user_id", "");
                                    Intent tent2 = new Intent();
                                    tent2.setClass(getActivity(), MainActivity.class);
                                    tent2.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
                                    startActivity(tent2);
                                }
                            });
                    builder.create().show();
                    break;
                case R.id.settings_ly:
                    Intent i5 = new Intent(getActivity(), SettingActivity.class);
                    startActivity(i5);
                    //startActivityForResult(i5, 10);
                    break;
                case R.id.toinfo:
                    Intent intent = new Intent(getActivity(), AccountSettingActivity.class);
                    intent.putExtra("name", userinfo.getNickname());
                    intent.putExtra("type", userinfo.getAgent_level() + "");
                    startActivity(intent);
                    break;
            }
        } else {
            startActivity(new Intent().setClass(getActivity(), NewLoginActivity.class));
        }
    }

    public void baseInfoRequest() {
        logoutBt.setVisibility(View.VISIBLE);
        noTv.setVisibility(View.GONE);
        name.setVisibility(View.VISIBLE);
        email.setVisibility(View.VISIBLE);
        steps_line.setVisibility(View.VISIBLE);
        mystepsLy.setVisibility(View.VISIBLE);
        BaseInfoRequest rq = new BaseInfoRequest();
        showWait(true);
        QuarkApi.HttpRequest(rq, mHandlermty);
    }

    boolean showRedButton = false;
    private final AsyncHttpResponseHandler mHandlermty = new AsyncHttpResponseHandler() {
        @Override
        public void onSuccess(int arg0, Header[] arg1, byte[] arg2) {
            Object kd = ApiResponse.get(arg2, getActivity(), InfoResponse.class);
            if (getActivity() != null) {
                if (kd != null) {
                    InfoResponse info = (InfoResponse) kd;
                    userinfo = info.getBaseInfoResult().getUserInfo();
                    ApiHttpClient.loadImage(userinfo.getImage_01(), atovar, R.drawable.example_7);
                    name.setText(userinfo.getNickname());
                    email.setText("Email:" + userinfo.getEmail());
                    if (userinfo.getAgent_level() == 2) {//显示我的订单
                        steps_line.setVisibility(View.VISIBLE);
                        mystepsLy.setVisibility(View.VISIBLE);
                        agentLevel.setText("Coach management");
                    } else if (userinfo.getAgent_level() == 1) {
                        agentLevel.setText("Teach with Skillopedia");
                    }

                    if (userinfo.getRead_number() > 0) {
                        number.setText(userinfo.getRead_number() + "");
                        number.setVisibility(View.VISIBLE);
                    } else {
                        number.setVisibility(View.GONE);
                    }

                    if (userinfo.getBooking_number() > 0) {
                        showRedButton = true;
                        redNotice.setVisibility(View.VISIBLE);
                    } else {
                        showRedButton = false;
                        redNotice.setVisibility(View.GONE);
                    }
                }
                showWait(false);
            }
        }

        @Override
        public void onFailure(int arg0, Header[] arg1, byte[] arg2, Throwable arg3) {
            AppContext.showToast("Network error" + arg0);
            showWait(false);
        }
    };

    private ReceiveBroadCastFour receiveBroadCastFour;

    public void registerBoradcastReceiverfour() {
        receiveBroadCastFour = new ReceiveBroadCastFour();
        IntentFilter filter = new IntentFilter();
        filter.addAction("broadfour"); // 只有持有相同的action的接受者才能接收此广播
//        filter.addAction("headpic");
        getActivity().registerReceiver(receiveBroadCastFour, filter);
    }

    public class ReceiveBroadCastFour extends BroadcastReceiver {
        @Override
        public void onReceive(Context context, Intent data) {
            String opertion = data.getStringExtra("opertion");
//            String state = data.getStringExtra("state");
//            if (state.equals("1")) {
//                baseInfoRequest();
//            }
            if (opertion.equals("refresh")) {
                baseInfoRequest();
            }
        }
    }

    @Override
    public void onDestroy() {
        try {
            getActivity().unregisterReceiver(receiveBroadCastFour);
        } catch (Exception e) {
            Log.e("error", "receiveBroadCastFour 销毁出错");
        }
        super.onDestroy();
    }


    /*=========================拍照===========================*/
    @OnClick(R.id.atovar)
    public void pic(View v) {
        if (new AppParam().isLogin(getActivity())) {
            ImageUtils.showSheetPic(getActivity(), handlerphoto);
        } else {
            startActivity(new Intent().setClass(getActivity(), NewLoginActivity.class));
        }
    }

    private Handler handlerphoto = new Handler() {
        public void handleMessage(Message msg) {
            switch (msg.what) {
                case 1:
                    startTakePhotoByPermissions(ImageUtils.CAMERA_REQUEST_CODE);
                    break;
                case 2:
                    startTakePhotoByPermissions(ImageUtils.IMAGE_REQUEST_CODE);
                    break;
                default:
                    break;
            }
            super.handleMessage(msg);
        }


    };

    private void startTakePhotoByPermissions(int type) {
        if (type == ImageUtils.CAMERA_REQUEST_CODE) {
            String[] perms = {Manifest.permission.CAMERA, Manifest.permission.WRITE_EXTERNAL_STORAGE};
            if (EasyPermissions.hasPermissions(getActivity(), perms)) {
                try {
                    ImageUtils.startTakePhoto(FragmentFour.this);
                } catch (Exception e) {
                    Toast.makeText(getActivity(), "相机无法完成初始化,请正确授权", Toast.LENGTH_LONG).show();
                }
            } else {
                EasyPermissions.requestPermissions(this, "请求获取相机权限", ImageUtils.CAMERA_REQUEST_CODE, perms);
            }
        } else {
            String[] perms = {Manifest.permission.READ_EXTERNAL_STORAGE};
            if (EasyPermissions.hasPermissions(getActivity(), perms)) {
                try {
                    ImageUtils.startImagePick(FragmentFour.this);
                } catch (Exception e) {
                    Toast.makeText(getActivity(), "无法读取图片,请正确授权", Toast.LENGTH_LONG).show();
                }
            } else {
                EasyPermissions.requestPermissions(this, "请求读取图片的权限", ImageUtils.IMAGE_REQUEST_CODE, perms);
            }
        }
    }

    @Override
    public void onPermissionsGranted(int requestCode, List<String> perms) {
        try {
            if (requestCode == ImageUtils.CAMERA_REQUEST_CODE) {
                ImageUtils.startTakePhoto(FragmentFour.this);
            } else {
                ImageUtils.startImagePick(FragmentFour.this);
            }
        } catch (Exception e) {
            Toast.makeText(getActivity(), "授权不正确,操作无法进行", Toast.LENGTH_LONG).show();
        }
    }

    @Override
    public void onPermissionsDenied(int requestCode, List<String> perms) {
        Toast.makeText(getActivity(), "授权不正确,操作无法进行", Toast.LENGTH_LONG).show();
    }

    @Override
    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (resultCode != 0) {
            switch (requestCode) {
                case ImageUtils.IMAGE_REQUEST_CODE:
                    ImageUtils.startPhotoZoom(data.getData(), 200, 200, getActivity(), FragmentFour.this);
                    break;
                case ImageUtils.CAMERA_REQUEST_CODE:
                    ImageUtils.startPhotoZoom(ImageUtils.cameraUri, 200, 200, getActivity(), FragmentFour.this);
                    break;
                case ImageUtils.RESULT_REQUEST_CODE:
                    if (data != null) {
                        String imagePath = ImageUtils.getImageToView(data, atovar);
                        updateAvatarRequest(imagePath);
                    }
                    break;
            }
        }
    }

    public void updateAvatarRequest(String imagePath) {
        List<FileItem> ls = new LinkedList<FileItem>();
        File file = null;
        try {
            file = ImageUtilsyasuo.compressAndGenImage(imagePath, 300, false);
            FileItem f = new FileItem("image_01", file);
            ls.add(f);
            UpdateAvatarRequest rq = new UpdateAvatarRequest();
            String ds = Math.random() + "";
            rq.setPid(ds + "");   //消除缓存
            showWait(true);
            QuarkApi.HttpuploadFile(rq, ls, httpCallBack);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    HttpCallBack httpCallBack = new HttpCallBack() {
        @Override
        public void onSuccess(String t) {
            super.onSuccess(t);
            showWait(false);
//            Log.e("error", "==" + t);
            try {
                UpdateAvatarResponse info = new UpdateAvatarResponse(t);
                showToast(info.getMessage());
            } catch (Exception e) {
                Log.e("error", "數據解析出錯");
            }
            showWait(false);
        }

        public void onFailure(int arg0, Header[] arg1, byte[] arg2, Throwable arg3) {
            AppContext.showToast("Network error" + arg0);
            showWait(false);
        }

    };

    /*=================图片end==========================*/
    @Override
    public void onResume() {
        super.onResume();
        if (new AppParam().isLogin(getActivity())) {
            baseInfoRequest();
        }
    }
}





