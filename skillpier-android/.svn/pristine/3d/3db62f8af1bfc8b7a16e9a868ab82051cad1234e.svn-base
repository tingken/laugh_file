package com.quark.skillopedia.mainview;

import android.Manifest;
import android.annotation.SuppressLint;
import android.app.AlertDialog;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.content.pm.PackageManager;
import android.graphics.Color;
import android.location.Location;
import android.location.LocationManager;
import android.os.Bundle;
import android.os.Handler;
import android.support.v4.app.ActivityCompat;
import android.support.v4.app.FragmentActivity;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.FragmentTransaction;
import android.util.Log;
import android.view.KeyEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.Window;
import android.view.WindowManager;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.Toast;

import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.location.LocationServices;
import com.loopj.android.http.AsyncHttpResponseHandler;
import com.quark.api.auto.bean.CityListRequest;
import com.quark.example.ExampleUtil;
import com.quark.skillopedia.AppContext;
import com.quark.skillopedia.AppParam;
import com.quark.skillopedia.R;
import com.quark.skillopedia.api.remote.QuarkApi;
import com.quark.skillopedia.uiview.NewLoginActivity;

import java.io.UnsupportedEncodingException;
import java.util.LinkedHashSet;
import java.util.Set;

import butterknife.ButterKnife;
import butterknife.InjectView;
import cn.jpush.android.api.CustomPushNotificationBuilder;
import cn.jpush.android.api.JPushInterface;
import cn.jpush.android.api.TagAliasCallback;
import cz.msebera.android.httpclient.Header;
/**
 * 主界面
 * @author pan
 * @time 2016/8/22 0022 下午 4:00
 */
@SuppressLint("ResourceAsColor")
public class MainActivity extends FragmentActivity implements OnClickListener ,GoogleApiClient.ConnectionCallbacks,
        GoogleApiClient.OnConnectionFailedListener{
    private static final String TAG = "JPush";

    private FragmentOne oneFragment;
    private FragmentTwo twoFragment;
    private FragmentThree threeFragment;
    private FragmentFour fourFragment;

    private View oneLayout;
    private View twoLayout;
    private View threeLayout;
    private View fourLayout;

    private ImageView oneImage;
    private ImageView twoImage;
    private ImageView threeImage;
    private ImageView fourImage;

    private TextView oneText;
    private TextView twoText;
    private TextView threeText;
    private TextView fourText;
    private TextView fiveText;

    private int current = 0;
    private FragmentManager fragmentManager;
    public static MainActivity instance;

    int msnumbers = 0;
    public static boolean isForeground = false;
    public static boolean out = false;
    private LocationManager manager;

//    @InjectView(R.id.one_header)
//    LinearLayout one_header;

    @InjectView(R.id.menu)
    LinearLayout menu;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        out = false;
        fragmentManager = getSupportFragmentManager();

//        registerBoradcastReceiver();
        registerMessageReceiver(new AppParam().getUser_id(this));//极光
        registerBoradcastReceiverJP();

        if (savedInstanceState != null) {
            oneFragment = (FragmentOne) fragmentManager.findFragmentByTag("oneFragment");
            twoFragment = (FragmentTwo) fragmentManager.findFragmentByTag("twoFragment");
            threeFragment = (FragmentThree) fragmentManager.findFragmentByTag("threeFragment");
            fourFragment = (FragmentFour) fragmentManager.findFragmentByTag("fourFragment");
        }

        requestWindowFeature(Window.FEATURE_NO_TITLE);
        setContentView(R.layout.activity_main);
        //        透明状态栏
//        getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);
//        透明导航栏
//        getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_NAVIGATION);
        ButterKnife.inject(this);
        instance = this;
        SharedPreferences sp = getSharedPreferences(AppParam.SHAREDPREFERENCESKEY, MODE_PRIVATE);
        if(new AppParam().isLogin(this)){
            Editor edit = sp.edit();
            edit.putString("role", "nologin");
            edit.commit();
        }
        getLocation();
        WindowManager wm = getWindowManager();
        int sw = wm.getDefaultDisplay().getWidth();
        int h = wm.getDefaultDisplay().getHeight();
        Editor edit = sp.edit();
        edit.putInt("screenWidth", sw);
        edit.putInt("screenHeight", h);
//        edit.putString("lat", "22.567009");
//        edit.putString("lng", "113.867102");
        edit.commit();

        initViews();

        Bundle bundle = getIntent().getExtras();
        if(bundle != null && bundle.containsKey("position")){
            String currentStr = getIntent().getStringExtra("position");
            current = Integer.valueOf(currentStr);
        }
        setTabSelection(current);
//        rongconnect();
//        menu.getBackground().setAlpha(90);
        cityListRequest();
    }

    private void initViews() {
        oneLayout = findViewById(R.id.one_layout);
        twoLayout = findViewById(R.id.two_layout);
        threeLayout = findViewById(R.id.three_layout);
        fourLayout = findViewById(R.id.four_layout);

        oneImage = (ImageView) findViewById(R.id.one_image);
        twoImage = (ImageView) findViewById(R.id.two_image);
        threeImage = (ImageView) findViewById(R.id.three_image);
        fourImage = (ImageView) findViewById(R.id.four_image);

        oneText = (TextView) findViewById(R.id.one_text);
        twoText = (TextView) findViewById(R.id.two_text);
        threeText = (TextView) findViewById(R.id.three_text);
        fourText = (TextView) findViewById(R.id.four_text);

        oneLayout.setOnClickListener(this);
        twoLayout.setOnClickListener(this);
        threeLayout.setOnClickListener(this);
        fourLayout.setOnClickListener(this);
    }

    @Override
    public void onClick(View v) {
        int id = v.getId();
        if (id == R.id.one_layout) {
//			if(new AppParam().isLogin(this)){
//            one_header.setVisibility(View.VISIBLE);
            setTabSelection(0);
//			}else{
//				startActivity(new Intent().setClass(this, LoginActivity.class));
//			}
        } else if (id == R.id.two_layout) {
//            if(new AppParam().isLogin(this)){
//            one_header.setVisibility(View.GONE);
                setTabSelection(1);
//            }else{
//                startActivity(new Intent().setClass(this, LoginActivity.class));
//            }
        } else if (id == R.id.three_layout) { //订单
			if(new AppParam().isLogin(this)){
//            one_header.setVisibility(View.GONE);
                     setTabSelection(2);
			}else{
				startActivity(new Intent().setClass(this, NewLoginActivity.class));
			}
        } else if (id == R.id.four_layout) {
//            one_header.setVisibility(View.GONE);
//            if(new AppParam().isLogin(this)){
                setTabSelection(3);
//            }else{
//                startActivity(new Intent().setClass(this, LoginActivity.class));
//            }
        }
    }

    private void setTabSelection(int index) {
        clearSelection();
        FragmentTransaction transaction = fragmentManager.beginTransaction();
        hideFragments(transaction);
        switch (index) {
            case 0:
                oneImage.setImageResource(R.drawable.tab_2);
                oneText.setTextColor(getResources().getColor(R.color.huise));
                if (oneFragment == null) {
                    oneFragment = new FragmentOne();
                    transaction.add(R.id.content,oneFragment, "oneFragment");
                } else {
                    transaction.show(oneFragment);
                }

                break;
            case 1:
                twoImage.setImageResource(R.drawable.tab_4);
                twoText.setTextColor(getResources().getColor(R.color.huise ));
                if (twoFragment == null) {
                    twoFragment = new FragmentTwo();
                    transaction.add(R.id.content,twoFragment, "twoFragment");
                } else {
                    transaction.show(twoFragment);
                }
                break;
            case 2:
                threeImage.setImageResource(R.drawable.tab_6);
                threeText.setTextColor(getResources().getColor(R.color.huise ));
                if (threeFragment == null) {
                    threeFragment = new FragmentThree();
                    transaction.add(R.id.content,threeFragment, "threeFragment");
                } else {
                    transaction.show(threeFragment);
                }

                break;
            case 3:
                fourImage.setImageResource(R.drawable.tab_8);
                fourText.setTextColor(getResources().getColor(R.color.huise));
                if (fourFragment == null) {
                    fourFragment = new FragmentFour();
                    transaction.add(R.id.content,fourFragment, "fourFragment");
                } else {
                    transaction.show(fourFragment);
                }
                break;

        }
        transaction.commit();
    }

    /**
     * 清除掉所有的选中状态。
     */
    private void clearSelection() {
        oneImage.setImageResource(R.drawable.tab_1);
        oneText.setTextColor(Color.parseColor("#82858b"));

        twoImage.setImageResource(R.drawable.tab_3);
		twoText.setTextColor(Color.parseColor("#82858b"));

        threeImage.setImageResource(R.drawable.tab_5);
        threeText.setTextColor(Color.parseColor("#82858b"));

        fourImage.setImageResource(R.drawable.tab_7);
        fourText.setTextColor(Color.parseColor("#82858b"));

    }

    /**
     * 将所有的Fragment都置为隐藏状态。
     *
     * @param transaction
     *            用于对Fragment执行操作的事务
     */
    private void hideFragments(FragmentTransaction transaction) {
        if (oneFragment != null) {
            transaction.hide(oneFragment);
        }
        if (twoFragment != null) {
            transaction.hide(twoFragment);
        }
        if (threeFragment != null) {
            transaction.hide(threeFragment);
        }
        if (fourFragment != null) {
            transaction.hide(fourFragment);
        }
//        if (fiveFragment != null) {
//            transaction.hide(fiveFragment);
//        }
    }

    boolean canload = true;
    @Override
    protected void onResume() {
        super.onResume();
        canload = true;
        isForeground = true;
        if(out){
            canload = false;
            out = false;
            finish();
        }
    }

    @Override
    protected void onPause() {
        isForeground = false;
        super.onPause();
    }

    @Override
    protected void onDestroy() {
        try {
//            unregisterReceiver(receiveBroadCast); // 注销广播接收器
            unregisterReceiver(mMessageReceiver);
            unregisterReceiver(receiveBroadCastJP);
        }catch (Exception e){
           Log.e("error","MainActivity 销毁出错");
        }

        super.onDestroy();
    }

    /*  极光推送  */
    //for receive customer msg from jpush server

    private ReceiveBroadCastJP receiveBroadCastJP;

    public void registerBoradcastReceiverJP() {
        receiveBroadCastJP = new ReceiveBroadCastJP();
        IntentFilter filter = new IntentFilter();
        filter.addAction("broadJP"); // 只有持有相同的action的接受者才能接收此广播
        registerReceiver(receiveBroadCastJP, filter);
    }

    public class ReceiveBroadCastJP extends BroadcastReceiver {
        @Override
        public void onReceive(Context context, Intent data) {
            String opertion = data.getStringExtra("opertion");
            if (opertion.equals("out")) {
                registerMessageReceiver("");
            }else {
                registerMessageReceiver(new AppParam().getUser_id(MainActivity.this));
            }
        }
    }

    private MessageReceiver mMessageReceiver;
    public static final String MESSAGE_RECEIVED_ACTION = "com.example.jpushdemo.MESSAGE_RECEIVED_ACTION";
    public static final String KEY_TITLE = "title";
    public static final String KEY_MESSAGE = "message";
    public static final String KEY_EXTRAS = "extras";

    public void registerMessageReceiver(String telephone) {

        mHandler.sendMessage(mHandler.obtainMessage(MSG_SET_ALIAS, new AppParam().getTelephone(this)));//设置别名
        setTag(telephone);
        mMessageReceiver = new MessageReceiver();
        IntentFilter filter = new IntentFilter();
        filter.setPriority(IntentFilter.SYSTEM_HIGH_PRIORITY);
        filter.addAction(MESSAGE_RECEIVED_ACTION);
        registerReceiver(mMessageReceiver, filter);
        setStyleCustom();   //设置样式
    }

    public class MessageReceiver extends BroadcastReceiver {

        @Override
        public void onReceive(Context context, Intent intent) {
            if (MESSAGE_RECEIVED_ACTION.equals(intent.getAction())) {
                String messge = intent.getStringExtra(KEY_MESSAGE);
                String extras = intent.getStringExtra(KEY_EXTRAS);
                StringBuilder showMsg = new StringBuilder();
                showMsg.append(KEY_MESSAGE + " : " + messge + "\n");
//          	  Toast.makeText(MainActivity.this, " "+messge, 0).show();

                if (!ExampleUtil.isEmpty(extras)) {
                    showMsg.append(KEY_EXTRAS + " : " + extras + "\n");
                }
            }
        }
    }

    private static final int MSG_SET_ALIAS = 1001;
    private static final int MSG_SET_TAGS = 1002;

	  private final Handler mHandler = new Handler() {
	        @Override
	        public void handleMessage(android.os.Message msg) {
	            super.handleMessage(msg);
	            switch (msg.what) {
	            case MSG_SET_ALIAS:
	                JPushInterface.setAliasAndTags(getApplicationContext(), (String) msg.obj, null, mAliasCallback);
	                break;

	            case MSG_SET_TAGS:
	                JPushInterface.setAliasAndTags(getApplicationContext(), null, (Set<String>) msg.obj, mTagsCallback);
	                break;

	            default:
	            }
	        }
	    };

    private final TagAliasCallback mAliasCallback = new TagAliasCallback() {

        @Override
        public void gotResult(int code, String alias, Set<String> tags) {
            String logs ;
            switch (code) {
                case 0:
                    logs = "Set tag and alias success======alias";
                    Log.i(TAG, logs);
                    break;
                case 6002:
                    logs = "Failed to set alias and tags due to timeout. Try again after 60s.======alias";
                    Log.i(TAG, logs);
                    if (ExampleUtil.isConnected(getApplicationContext())) {
//	                	mHandler.sendMessageDelayed(mHandler.obtainMessage(MSG_SET_ALIAS, alias), 1000 * 60);
                    } else {
                        Log.i(TAG, "No network======alias");
                    }
                    break;
                default:
                    logs = "Failed with errorCode = " + code;
                    Log.e(TAG, logs);
            }
//	            ExampleUtil.showToast(logs, getApplicationContext());
        }
    };

    /**
     *设置通知栏样式 - 定义通知栏Layout
     */
		private void setStyleCustom(){
			CustomPushNotificationBuilder builder = new CustomPushNotificationBuilder(MainActivity.this,R.layout.customer_notitfication_layout,R.id.icon, R.id.title, R.id.text);
			builder.statusBarDrawable = R.drawable.ic_launcher;
			builder.layoutIconDrawable = R.drawable.ic_launcher;
			builder.developerArg0 = "developerArg2";
			JPushInterface.setPushNotificationBuilder(2, builder);
//			Toast.makeText(PushSetActivity.this,"Custom Builder - 2", Toast.LENGTH_SHORT).show();
		}

    /**
     * @ClassName:   MainActivity.java
     * @Description: 设置tag
     * @author       howe
     * @date         2015-6-17
     * @version      V1.0
     */
		private void setTag(String tag){
			Set<String> tagSet = new LinkedHashSet<String>();
			tagSet.add(tag);
//			tagSet.add(tag2);
			//调用JPush API设置Tag
			mHandler.sendMessage(mHandler.obtainMessage(MSG_SET_TAGS, tagSet));
		}
//
    private final TagAliasCallback mTagsCallback = new TagAliasCallback() {

        @Override
        public void gotResult(int code, String alias, Set<String> tags) {
            String logs ;
            switch (code) {
                case 0:
                    logs = "Set tag and alias success======tag";
                    Log.i(TAG, logs);
                    break;

                case 6002:
                    logs = "Failed to set alias and tags due to timeout. Try again after 60s.======tag";
                    Log.i(TAG, logs);
                    if (ExampleUtil.isConnected(getApplicationContext())) {
//		                	mHandler.sendMessageDelayed(mHandler.obtainMessage(MSG_SET_TAGS, tags), 1000 * 60);
                    } else {
                        Log.i(TAG, "No network======tag");
                    }
                    break;

                default:
                    logs = "Failed with errorCode = " + code;
                    Log.e(TAG, logs);
            }
//		    ExampleUtil.showToast(logs, getApplicationContext());
        }

    };
/*  极光推送  */

    // 注册广播
//    private ReceiveBroadCast receiveBroadCast;
//    public void registerBoradcastReceiver() {
//        receiveBroadCast = new ReceiveBroadCast();
//        IntentFilter filter = new IntentFilter();
//        filter.addAction("setFragmentBroad"); // 只有持有相同的action的接受者才能接收此广播
//        registerReceiver(receiveBroadCast, filter);
//    }
//
//    public class ReceiveBroadCast extends BroadcastReceiver {
//        @Override
//        public void onReceive(Context context, Intent data) {
//            String position = data.getStringExtra("position");
//            if (position.equals("1")) {
//                setTabSelection(1);
//            }else if(position.equals("3")){
//                setTabSelection(3);
//            }
//        }
//    }

    @Override
    public boolean onKeyDown(int keyCode, KeyEvent event) {
        if(keyCode == KeyEvent.KEYCODE_BACK) { //监控/拦截/屏蔽返回键
//			    	moveTaskToBack(true);
            exitApp();
            return true;
        }
//			    else if(keyCode == KeyEvent.KEYCODE_MENU) {
//		            //监控/拦截菜单键
//		        } else if(keyCode == KeyEvent.KEYCODE_HOME) {
//		            //由于Home键为系统键，此处不能捕获，需要重写onAttachedToWindow()
//		        }
        return super.onKeyDown(keyCode, event);
    }

    private void exitApp(){
        final AlertDialog dlg = new AlertDialog.Builder(this).create();
        dlg.setTitle(getString(R.string.exitTip));
        dlg.setMessage(getString(R.string.exitTip2));
        dlg.setButton(DialogInterface.BUTTON_POSITIVE,"Sure",new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                finish();
            }
        });
        dlg.setButton(DialogInterface.BUTTON_NEGATIVE, "Cancel", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                dlg.cancel();
            }
        });
        dlg.show();
    }

 /**
  * 获取城市信息
  * @author leon
  * @time 2016/8/4 0004 下午 4:18
  */
     public void cityListRequest() {
         CityListRequest rq = new CityListRequest();
         QuarkApi.HttpRequest(rq, mHandlercity);
     }

      private final AsyncHttpResponseHandler mHandlercity = new AsyncHttpResponseHandler() {
          @Override
          public void onSuccess(int arg0, Header[] arg1, byte[] arg2) {
//              Object kd = ApiResponse.get(arg2, MainActivity.this, CityListResponse.class);
              if (arg2!=null){
//                  CityListResponse info = (CityListResponse)kd;
                  try {
                      String ds = new String(arg2, "UTF-8");
                      new AppParam().setSharedPreferencesy(MainActivity.this,"zcodes",ds);  //保存获取到的城市数据 搜索的时候自动填充需要
                  } catch (UnsupportedEncodingException e) {
                      e.printStackTrace();
                  }
              }
          }

          @Override
          public void onFailure(int arg0, Header[] arg1, byte[] arg2, Throwable arg3) {
              AppContext.showToast("Network error" + arg0);
          }
      };

    //--------------------------定位-----------------------------------------
    GoogleApiClient mGoogleApiClient;
    public void getLocation() {
        //创建一个实例GoogleAPIClient.
        mGoogleApiClient = new GoogleApiClient.Builder(this)
                .addConnectionCallbacks(this)
                .addOnConnectionFailedListener(this)
                .addApi(LocationServices.API)
                .build();
        mGoogleApiClient.connect();
    }

    public static double lat;
    public static double lng;
    @Override
    public void onConnected(Bundle bundle) {
        if (ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION)
                != PackageManager.PERMISSION_GRANTED
                && ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_COARSE_LOCATION)
                != PackageManager.PERMISSION_GRANTED) {

            return;
        }
//        createLocationRequest();
        Location mLastLocation = LocationServices.FusedLocationApi.getLastLocation(mGoogleApiClient);
        if (mLastLocation != null) {
            lat = mLastLocation.getLatitude();
            lng = mLastLocation.getLongitude();

            Log.e("error", "定位的Latitude=" + mLastLocation.getLatitude() + "  Longitude=" + mLastLocation.getLongitude());
            new AppParam().setSharedPreferencesy(this, "lat", lat + "");
            new AppParam().setSharedPreferencesy(this, "lng", lng + "");
        } else {
            Toast.makeText(this, "Unable to get your current location", Toast.LENGTH_LONG).show();
        }
    }

    @Override
    public void onConnectionSuspended(int i) {
    }

    @Override
    public void onConnectionFailed(ConnectionResult connectionResult) {
        Toast.makeText(this, "Unable to get your current location", Toast.LENGTH_LONG).show();
    }

//    protected void createLocationRequest() {
//        LocationRequest mLocationRequest = new LocationRequest();
//        mLocationRequest.setInterval(10000);
//        mLocationRequest.setFastestInterval(5000);
//        mLocationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);
//
//        if (ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(getActivity(), Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {
//            return;
//        }
////        LocationServices.FusedLocationApi.requestLocationUpdates(mGoogleApiClient, mLocationRequest, this);
//    }

    //--------------------------定位end--------------------------------------

}



